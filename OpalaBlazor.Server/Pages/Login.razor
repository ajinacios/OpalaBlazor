@page "/login"
@inherits LoginBase
@using Authentication
@using OpalaBlazor.Models
@using OpalaBlazor.Models.Dtos;
@using OpalaBlazor.Server.Services.Contracts;
@inject IUsuarioService userService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>Login</label>
            <input class="form-control" placeholder="Login" @bind="model.Login" />
        </div>
        <div class="mb-3">
            <label>Senha</label>
            <input class="form-control" type="password" placeholder="Senha" @bind="model.Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button class="btn btn-primary" @onclick="Authenticate">Entrar</button>
        </div>

    </div>
</div>

@code {

    public class Model
    {
        public string UserName { get; set; }
        public string Login { get; set; }
        public string Password { get; set; }
    }

    public Model model = new Model();

    public UsuarioDto userAccount = new UsuarioDto();

    public async void Authenticate()
    {
        userAccount = await userService.GetOneLogin(model.Login);

        if (userAccount == null || userAccount.Senha != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Login ou Usuário Inválido.");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.Nome,
                Login = userAccount.Login,
                Role = userAccount.Cargo
            });
        navManager.NavigateTo("/", true);
    }
}
